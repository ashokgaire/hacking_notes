Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-05-19T13:47:50-04:00

====== tcpdump ======
Created Tuesday 19 May 2020

is a powerfull commandline packet anyalyze

====== to analyze ======

**sudo tcpdump -r password_cracking_filtered.pcap**

   —     -r opens an existing file


====== Filtering Traffic ======

First, we will use the -n option to skip DNS name lookups and -r to read from our packet capture
file. Then, we can pipe the output into awk , printing the destination IP address and port (the third
space-separated field) and pipe it again to sort and uniq -c to sort and count the number of times
the field appears in the capture, respectively. Lastly we use head to only display the first 10 lines of
the output:
**kali@kali:~$ sudo tcpdump -n -r password_cracking_filtered.pcap | awk -F" " '{print $3**
**}' | sort | uniq -c | head**

* -n skip dns lookup
* -r read file
* uniq -c to sort and count


In order to filter from the command line, we will use the **source host ( src host )** and **destination**
**host ( dst host )** filters to output only source and destination traffic respectively. We can also filter
by **port number ( -n port 81 )** to show both source and destination traffic against port 81. Let’s try
those filters now:

**sudo tcpdump -n src host 172.16.40.10 -r password_cracking_filtered.pcap**

**sudo tcpdump -n dst host 172.16.40.10 -r password_cracking_filtered.pcap**

**sudo tcpdump -n port 81 -r password_cracking_filtered.pcap**


To dump the captured traffic, we will use the -X option to print the packet data in both HEX and
ASCII 108 format:

**sudo tcpdump -nX -r password_cracking_filtered.pcap**


====== Advanced Header Filtering ======

**CEUAPRSF**
**WCRCSSYI**
**REGKHTNN**
**00011000= 24 in decimal**

**echo "$((2#00011000))"       ** ==24

We can pass this number to tcpdump with **‘tcp[13] = 24’** as a display filter to indicate that we
only want to see packets with the ACK and PSH bits set (“data packets”) as represented by the
fourth and fifth bits **( 24 )** of the 14th byte of the TCP header. Bear in mind, the tcpdump array index
used for counting the bytes starts at zero, so the syntax should be **( tcp[13] )**.
The combination of these two flags will hopefully show us only the HTTP requests and responses
data. Here’s the command we’ll use to display packets that have the ACK or PSH flags set:


**sudo tcpdump -A -n 'tcp[13] = 24' -r password_cracking_filtered.pcap**
