Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2020-05-21T11:13:21-04:00

====== buffer overflow ======
Created Thursday 21 May 2020

a type of memory corruption vulnerability.

lowest memory address (0x00000000) and the highest memory address (0x7FFFFFFF)

====== CPU Registers ======
{{./pasted_image.png}}

====== general purpose register ======

* EAX (accumulator): Arithmetical and logical instructions
* EBX (base): Base pointer for memory addresses
* ECX (counter): Loop, shift, and rotation counter
* EDX (data): I/O port addressing, multiplication, and division
* ESI (source index): Pointer addressing of data and source in string copy operations
* EDI (destination index): Pointer addressing of data and destination in string copy operations

====== 10.1.2.2 ESP - The Stack Pointer ======
As previously mentioned, the stack is used for storage of data, pointers, and arguments. Since the
stack is dynamic and changes constantly during program execution, ESP, the stack pointer, keeps
“track” of the most recently referenced location on the stack (top of the stack) by storing a pointer
to it.
A pointer is a reference to an address (or location) in memory. When we say a
register “stores a pointer” or “points” to an address, this essentially means that
the register is storing that target address.

====== 10.1.2.3 EBP - The Base Pointer ======
Since the stack is in constant flux during the execution of a thread, it can become difficult for a
function to locate its own stack frame, which stores the required arguments, local variables, and
the return address. EBP, the base pointer, solves this by storing a pointer to the top of the stack
when a function is called. By accessing EBP, a function can easily reference information from its
own stack frame (via offsets) while executing.

====== 10.1.2.4 EIP - The Instruction Pointer ======
EIP, the instruction pointer, is one of the most important registers for our purposes as it always
points to the next code instruction to be executed. Since EIP essentially directs the flow of a
program, it is an attacker’s primary target when exploiting any memory corruption vulnerability such
as a buffer overflow.


	**First Argument: RDI**
**    Second Argument: RSI**
**    Third Argument: RDX**
**    Fourth Argument: RCX**
**    Fifth Argument: R8**
**    Sixth Argument: R9**

**EAX; Accumulator of operands and result data**
**EBX; Pointer to data in the DS segment (extra storge)**
**ECX; Counter for string and loop operations**
**EDX; I/O pointer**
**ESI; Pointer to data in the segment pointed to by the DS register; source pointer for string**
**operations**
**EDI; Pointer to data (or destination) in the segment pointed to by the ES register;**
**destination pointer for string operations**
**ESP; Stack pointer (in the SS segment)**
**EBP; Pointer to data on the stack (in the SS segment) base pointer**
